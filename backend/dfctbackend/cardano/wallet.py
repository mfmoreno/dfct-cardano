from typing import Optional
from pycardano import Address
import logging

from dfctbackend.config import settings

logger = logging.getLogger(__name__)

class CardanoWallet:
    """
    Class representing a Cardano wallet using files generated by cardano-cli.
    """
    def __init__(self, name: str):
        """
        Initialize a wallet from files in the assets directory.
        """
        self.name = name
        self.addr_path = settings.ASSETS_DIR / f"{name}.addr"
        self.skey_path = settings.ASSETS_DIR / f"{name}.skey"
        self.pkh_path = settings.ASSETS_DIR / f"{name}.pkh"
        self._address = None
        self._pub_key_hash = None
        self._load_wallet_data()

    def _load_wallet_data(self):
        """Load wallet data from files."""
        try:
            with open(self.addr_path, "r") as f:
                self._address = Address.from_primitive(f.read().strip())

            with open(self.pkh_path, "r") as f:
                self._pub_key_hash = f.read().strip()

        except Exception as e:
            raise ValueError(f"Failed to load wallet data for {self.name}: {str(e)}")

    @staticmethod
    def create_wallet(name: str, pub_key_hash: str, address: str, skey: str) -> 'CardanoWallet':
        """
        Create a new wallet by writing provided data to files and return a CardanoWallet instance.

        Args:
            name: The name of the wallet
            pub_key_hash: The public key hash
            address: The wallet address
            skey: The signing key

        Returns:
            CardanoWallet: A new wallet instance loaded from the created files

        Raises:
            ValueError: If file creation fails
        """
        try:
            # Ensure assets directory exists
            settings.ASSETS_DIR.mkdir(parents=True, exist_ok=True)

            # Write address to .addr file
            addr_path = settings.ASSETS_DIR / f"{name}.addr"
            with open(addr_path, "w") as f:
                f.write(address.strip())

            # Write signing key to .skey file
            skey_path = settings.ASSETS_DIR / f"{name}.skey"
            with open(skey_path, "w") as f:  # Fix: Removed .writer
                f.write(skey.strip())

            # Write public key hash to .pkh file
            pkh_path = settings.ASSETS_DIR / f"{name}.pkh"
            with open(pkh_path, "w") as f:
                f.write(pub_key_hash.strip())

            # Return new wallet instance
            return CardanoWallet(name)

        except Exception as e:
            raise ValueError(f"Failed to create wallet {name}: {str(e)}")

    @property
    def address(self) -> Optional[Address]:
        """Get the wallet address."""
        return self._address

    @property
    def address_str(self) -> Optional[str]:
        """Get the wallet address as a string."""
        return str(self._address) if self._address else None

    @property
    def pub_key_hash(self) -> Optional[str]:
        """Get the payment key hash."""
        return self._pub_key_hash

# Initialize local wallets
local_wallets = {
    "owner": CardanoWallet("owner"),
    "proposer": CardanoWallet("proposer"),
    "reviewer1": CardanoWallet("reviewer1"),
    "reviewer2": CardanoWallet("reviewer2")
}