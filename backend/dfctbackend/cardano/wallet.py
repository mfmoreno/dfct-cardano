from typing import Any, Optional
from pathlib import Path
from pycardano import Address, PaymentSigningKey
import logging

from dfctbackend.config import settings

logger = logging.getLogger(__name__)

class CardanoWallet:
    """
    Class representing a Cardano wallet using files generated by cardano-cli.
    """
    def __init__(self, name: str):
        """
        Initialize a wallet from files in the assets directory.
        """
        self.name = name
        self.addr_path = settings.ASSETS_DIR / f"{name}.addr"
        self.vkey_path = settings.ASSETS_DIR / f"{name}.vkey"
        self.skey_path = settings.ASSETS_DIR / f"{name}.skey"
        self.pkh_path = settings.ASSETS_DIR / f"{name}.pkh"
        self._address = None
        self._payment_key_hash = None
        self._load_wallet_data()

    def _load_wallet_data(self):
        """Load wallet data from files."""
        try:
            with open(self.addr_path, "r") as f:
                self._address = Address.from_primitive(f.read().strip())

            with open(self.pkh_path, "r") as f:
                self._payment_key_hash = f.read().strip()
        except Exception as e:
            raise ValueError(f"Failed to load wallet data for {self.name}: {str(e)}")

    @property
    def address(self) -> Optional[Address]:
        """Get the wallet address."""
        return self._address

    @property
    def address_str(self) -> Optional[str]:
        """Get the wallet address as a string."""
        return str(self._address) if self._address else None

    @property
    def public_key_hash(self) -> Optional[str]:
        """Get the payment key hash."""
        return self._payment_key_hash

    @property
    def payment_signing_key(self) -> Optional[PaymentSigningKey]:
        """Get the payment signing key."""
        if self.skey_path.exists():
            try:
                with open(self.skey_path, 'r') as f:
                    return PaymentSigningKey.from_json(f.read())
            except Exception as e:
                logger.error(f"Failed to load signing key for {self.name}: {str(e)}")
                raise ValueError(f"Failed to load signing key: {str(e)}")
        return None

    def to_dict(self) -> dict[str, Any]:
        """
        Convert wallet information to a dictionary.
        """
        return {
            "name": self.name,
            "address": self.address_str,
            "public_key_hash": self.public_key_hash
        }

# Initialize wallets
local_wallets = {
    "owner": CardanoWallet("owner"),
    "proposer": CardanoWallet("proposer"),
    "reviewer1": CardanoWallet("reviewer1"),
    "reviewer2": CardanoWallet("reviewer2")
}

def get_wallet_by_name(name: str) -> Optional[CardanoWallet]:
    """
    Get a wallet by name.
    """
    return local_wallets.get(name.lower())