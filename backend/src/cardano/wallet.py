from typing import Any, Optional
from pycardano import Address, Network

from dfctbackend.config import settings

class CardanoWallet:
    """
    Class representing a Cardano wallet using files generated by cardano-cli. test oriented
    """
    
    def __init__(self, name: str):
        """
        Initialize a wallet from files in the assets directory.
        
        Args:
            name: Name of the wallet (e.g., "owner", "proposer").
        """
        self.name = name
  
        # Set file paths
        self.addr_path = settings.ASSETS_DIR / f"{name}.addr"
        self.vkey_path = settings.ASSETS_DIR / f"{name}.vkey"
        self.skey_path = settings.ASSETS_DIR / f"{name}.skey"
        self.pkh_path = settings.ASSETS_DIR / f"{name}.pkh"
        
        # Load wallet data
        self._address: Optional[Address] = None
        self._payment_key_hash: Optional[str] = None
        
        self._load_wallet_data()
    
    def _load_wallet_data(self):
        """Load wallet data from files."""
        try:
            # Load address
            if self.addr_path.exists():
                with open(self.addr_path, "r") as f:
                    addr_str = f.read().strip()
                    self._address = Address.from_primitive(addr_str)
            
            # Load payment key hash
            if self.pkh_path.exists():
                with open(self.pkh_path, "r") as f:
                    self._payment_key_hash = f.read().strip()
            else:
                # If pkh file doesn't exist, try to derive it from the vkey
                pass  # This would require proper key parsing
                
        except Exception as e:
            raise ValueError(f"Failed to load wallet data for {self.name}: {str(e)}")
    
    @property
    def address(self) -> Optional[Address]:
        """Get the wallet address."""
        return self._address
    
    @property
    def address_str(self) -> Optional[str]:
        """Get the wallet address as a string."""
        return str(self._address) if self._address else None
    
    @property
    def payment_key_hash(self) -> Optional[str]:
        """Get the payment key hash."""
        return self._payment_key_hash
    
    def to_dict(self) -> dict[str, Any]:
        """
        Convert wallet information to a dictionary.
        
        Returns:
            dict[str, Any]: Wallet information.
        """
        return {
            "name": self.name,
            "address": self.address_str,
            "payment_key_hash": self._payment_key_hash
        }

# Initialize wallets
owner_wallet = CardanoWallet("owner")
proposer_wallet = CardanoWallet("proposer")
reviewer1_wallet = CardanoWallet("reviewer1")
reviewer2_wallet = CardanoWallet("reviewer2")

# list of available wallets
local_wallets = {
    "owner": owner_wallet,
    "proposer": proposer_wallet,
    "reviewer1": reviewer1_wallet,
    "reviewer2": reviewer2_wallet
}

def get_wallet_by_name(name: str) -> Optional[CardanoWallet]:
    """
    Get a wallet by name.
    
    Args:
        name: Name of the wallet.
        
    Returns:
        Optional[CardanoWallet]: The wallet if found, None otherwise.
    """
    return local_wallets.get(name.lower())